cmake_minimum_required(VERSION 3.0.2)
project(ir2425_group_15)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)
add_compile_options(-std=c++17)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  
  std_msgs
  geometry_msgs
  play_motion_msgs
  nav_msgs
  moveit_msgs
  visualization_msgs
  shape_msgs
  
  actionlib
  moveit_ros_planning_interface
  
  apriltag_ros
  tiago_iaslab_simulation
  gazebo_ros_link_attacher
)

find_package(yaml-cpp REQUIRED)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
add_action_files(
  DIRECTORY action
  FILES
  AprilTagsDetection.action
  RobotController.action
  RobotNavigation.action
  PickPlace.action
  TaskStatus.action
)

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs
  geometry_msgs
  actionlib_msgs
  nav_msgs
  moveit_msgs
  visualization_msgs
  shape_msgs
)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES ir2425_group_15
  CATKIN_DEPENDS roscpp std_msgs actionlib apriltag_ros tiago_iaslab_simulation moveit_ros_planning_interface gazebo_ros_link_attacher
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  ${catkin_INCLUDE_DIRS}
  
  include
  include/apriltags_detection
  include/robot_controller
  include/robot_navigation
  include/pick_place
  include/task_status
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/ir2425_group_15.cpp
# )
add_library(message_builder_lib
  include/message_builder.h
  src/message_builder.cpp
)

add_library(apriltags_detection_lib
  include/apriltags_detection/apriltags_detection.h
  src/apriltags_detection/apriltags_detection.cpp
)
add_library(apriltags_detection_action_lib
  include/apriltags_detection/apriltags_detection_action.h
  src/apriltags_detection/apriltags_detection_action.cpp
)

add_library(robot_controller_lib
  include/robot_controller/robot_controller.h
  src/robot_controller/robot_controller.cpp
)
add_library(robot_controller_action_lib
  include/robot_controller/robot_controller_action.h
  src/robot_controller/robot_controller_action.cpp
)

add_library(robot_navigation_lib
  include/robot_navigation/robot_navigation.h
  src/robot_navigation/robot_navigation.cpp
)
add_library(robot_navigation_action_lib
  include/robot_navigation/robot_navigation_action.h
  src/robot_navigation/robot_navigation_action.cpp
)

add_library(pick_place_lib
  include/pick_place/pick_place.h
  src/pick_place/pick_place.cpp
)
add_library(pick_place_action_lib
  include/pick_place/pick_place_action.h
  src/pick_place/pick_place_action.cpp
)

add_library(task_status_lib
  include/task_status/task_status.h
  src/task_status/task_status.cpp
)
add_library(task_status_action_lib
  include/task_status/task_status_action.h
  src/task_status/task_status_action.cpp
)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/ir2425_group_15_node.cpp)
add_executable(apriltags_detection_action_server src/apriltags_detection/apriltags_detection_action_server.cpp)
add_executable(robot_controller_action_server src/robot_controller/robot_controller_action_server.cpp)
add_executable(robot_navigation_action_server src/robot_navigation/robot_navigation_action_server.cpp)
add_executable(pick_place_action_server src/pick_place/pick_place_action_server.cpp)
add_executable(task_status_action_server src/task_status/task_status_action_server.cpp)

add_executable(start_task src/start_task.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(apriltags_detection_action_server ${catkin_EXPORTED_TARGETS} ${ir2425_group_15_EXPORTED_TARGETS})
add_dependencies(robot_controller_action_server ${catkin_EXPORTED_TARGETS} ${ir2425_group_15_EXPORTED_TARGETS})
add_dependencies(robot_navigation_action_server ${catkin_EXPORTED_TARGETS} ${ir2425_group_15_EXPORTED_TARGETS})
add_dependencies(pick_place_action_server ${catkin_EXPORTED_TARGETS} ${ir2425_group_15_EXPORTED_TARGETS})
add_dependencies(task_status_action_server ${catkin_EXPORTED_TARGETS} ${ir2425_group_15_EXPORTED_TARGETS})

add_dependencies(start_task ${catkin_EXPORTED_TARGETS} ${ir2425_group_15_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )
target_link_libraries(message_builder_lib ${catkin_LIBRARIES})

target_link_libraries(apriltags_detection_lib ${catkin_LIBRARIES} message_builder_lib)
target_link_libraries(apriltags_detection_action_lib ${catkin_LIBRARIES} apriltags_detection_lib)
target_link_libraries(apriltags_detection_action_server ${catkin_LIBRARIES} apriltags_detection_action_lib)

target_link_libraries(robot_controller_lib ${catkin_LIBRARIES} message_builder_lib)
target_link_libraries(robot_controller_action_lib ${catkin_LIBRARIES} robot_controller_lib)
target_link_libraries(robot_controller_action_server ${catkin_LIBRARIES} robot_controller_action_lib)

target_link_libraries(robot_navigation_lib ${catkin_LIBRARIES} ${YAML_CPP_LIBRARIES} message_builder_lib)
target_link_libraries(robot_navigation_action_lib ${catkin_LIBRARIES} robot_navigation_lib)
target_link_libraries(robot_navigation_action_server ${catkin_LIBRARIES} robot_navigation_action_lib)

target_link_libraries(pick_place_lib ${catkin_LIBRARIES} ${YAML_CPP_LIBRARIES} message_builder_lib)
target_link_libraries(pick_place_action_lib ${catkin_LIBRARIES} pick_place_lib)
target_link_libraries(pick_place_action_server ${catkin_LIBRARIES} pick_place_action_lib)

target_link_libraries(task_status_lib ${catkin_LIBRARIES} apriltags_detection_action_lib robot_navigation_action_lib pick_place_action_lib)
target_link_libraries(task_status_action_lib ${catkin_LIBRARIES} task_status_lib robot_controller_action_lib)
target_link_libraries(task_status_action_server ${catkin_LIBRARIES} task_status_action_lib)

target_link_libraries(start_task ${catkin_LIBRARIES} task_status_action_lib)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# catkin_install_python(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_ir2425_group_15.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
